input FileInfoInput {
  name: String
  alternativeText: String
  caption: String
}

type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

input UsersPermissionsRegisterInput {
  username: String!
  email: String!
  password: String!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UserPermissionsPasswordPayload {
  ok: Boolean!
}

type CleanBeauty {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  published_at: DateTime
  Organic(sort: String, limit: Int, start: Int, where: JSON): [Products]
  Vegan(sort: String, limit: Int, start: Int, where: JSON): [Products]
}

type CleanBeautyConnection {
  values: [CleanBeauty]
  groupBy: CleanBeautyGroupBy
  aggregate: CleanBeautyAggregator
}

type CleanBeautyAggregator {
  count: Int
  totalCount: Int
}

type CleanBeautyGroupBy {
  id: [CleanBeautyConnectionId]
  created_at: [CleanBeautyConnectionCreated_at]
  updated_at: [CleanBeautyConnectionUpdated_at]
  published_at: [CleanBeautyConnectionPublished_at]
}

type CleanBeautyConnectionId {
  key: ID
  connection: CleanBeautyConnection
}

type CleanBeautyConnectionCreated_at {
  key: DateTime
  connection: CleanBeautyConnection
}

type CleanBeautyConnectionUpdated_at {
  key: DateTime
  connection: CleanBeautyConnection
}

type CleanBeautyConnectionPublished_at {
  key: DateTime
  connection: CleanBeautyConnection
}

input CleanBeautyInput {
  Organic: [ID]
  Vegan: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editCleanBeautyInput {
  Organic: [ID]
  Vegan: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createCleanBeautyInput {
  data: CleanBeautyInput
}

type createCleanBeautyPayload {
  cleanBeauty: CleanBeauty
}

input updateCleanBeautyInput {
  where: InputID
  data: editCleanBeautyInput
}

type updateCleanBeautyPayload {
  cleanBeauty: CleanBeauty
}

input deleteCleanBeautyInput {
  where: InputID
}

type deleteCleanBeautyPayload {
  cleanBeauty: CleanBeauty
}

type FavouriteProducts {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  users_permissions_user: UsersPermissionsUser
  published_at: DateTime
  products(sort: String, limit: Int, start: Int, where: JSON): [Products]
}

type FavouriteProductsConnection {
  values: [FavouriteProducts]
  groupBy: FavouriteProductsGroupBy
  aggregate: FavouriteProductsAggregator
}

type FavouriteProductsAggregator {
  count: Int
  totalCount: Int
}

type FavouriteProductsGroupBy {
  id: [FavouriteProductsConnectionId]
  created_at: [FavouriteProductsConnectionCreated_at]
  updated_at: [FavouriteProductsConnectionUpdated_at]
  users_permissions_user: [FavouriteProductsConnectionUsers_permissions_user]
  published_at: [FavouriteProductsConnectionPublished_at]
}

type FavouriteProductsConnectionId {
  key: ID
  connection: FavouriteProductsConnection
}

type FavouriteProductsConnectionCreated_at {
  key: DateTime
  connection: FavouriteProductsConnection
}

type FavouriteProductsConnectionUpdated_at {
  key: DateTime
  connection: FavouriteProductsConnection
}

type FavouriteProductsConnectionUsers_permissions_user {
  key: ID
  connection: FavouriteProductsConnection
}

type FavouriteProductsConnectionPublished_at {
  key: DateTime
  connection: FavouriteProductsConnection
}

input FavouriteProductInput {
  products: [ID]
  users_permissions_user: ID
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editFavouriteProductInput {
  products: [ID]
  users_permissions_user: ID
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createFavouriteProductInput {
  data: FavouriteProductInput
}

type createFavouriteProductPayload {
  favouriteProduct: FavouriteProducts
}

input updateFavouriteProductInput {
  where: InputID
  data: editFavouriteProductInput
}

type updateFavouriteProductPayload {
  favouriteProduct: FavouriteProducts
}

input deleteFavouriteProductInput {
  where: InputID
}

type deleteFavouriteProductPayload {
  favouriteProduct: FavouriteProducts
}

type Herren {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  published_at: DateTime
  Dufte(sort: String, limit: Int, start: Int, where: JSON): [Products]
  Rasur(sort: String, limit: Int, start: Int, where: JSON): [Products]
  Bart(sort: String, limit: Int, start: Int, where: JSON): [Products]
  Pflege(sort: String, limit: Int, start: Int, where: JSON): [Products]
}

type HerrenConnection {
  values: [Herren]
  groupBy: HerrenGroupBy
  aggregate: HerrenAggregator
}

type HerrenAggregator {
  count: Int
  totalCount: Int
}

type HerrenGroupBy {
  id: [HerrenConnectionId]
  created_at: [HerrenConnectionCreated_at]
  updated_at: [HerrenConnectionUpdated_at]
  published_at: [HerrenConnectionPublished_at]
}

type HerrenConnectionId {
  key: ID
  connection: HerrenConnection
}

type HerrenConnectionCreated_at {
  key: DateTime
  connection: HerrenConnection
}

type HerrenConnectionUpdated_at {
  key: DateTime
  connection: HerrenConnection
}

type HerrenConnectionPublished_at {
  key: DateTime
  connection: HerrenConnection
}

input HerrenInput {
  Dufte: [ID]
  Rasur: [ID]
  Bart: [ID]
  Pflege: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editHerrenInput {
  Dufte: [ID]
  Rasur: [ID]
  Bart: [ID]
  Pflege: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createHerrenInput {
  data: HerrenInput
}

type createHerrenPayload {
  herren: Herren
}

input updateHerrenInput {
  where: InputID
  data: editHerrenInput
}

type updateHerrenPayload {
  herren: Herren
}

input deleteHerrenInput {
  where: InputID
}

type deleteHerrenPayload {
  herren: Herren
}

type Livestyle {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  published_at: DateTime
  Trinkflaschen(sort: String, limit: Int, start: Int, where: JSON): [Products]
  Makeup_Etuis(sort: String, limit: Int, start: Int, where: JSON): [Products]
  Korperbursten(sort: String, limit: Int, start: Int, where: JSON): [Products]
  Kerzen(sort: String, limit: Int, start: Int, where: JSON): [Products]
  Fur_Mutter(sort: String, limit: Int, start: Int, where: JSON): [Products]
  Nahrungserganzungsmittel(sort: String, limit: Int, start: Int, where: JSON): [Products]
}

type LivestyleConnection {
  values: [Livestyle]
  groupBy: LivestyleGroupBy
  aggregate: LivestyleAggregator
}

type LivestyleAggregator {
  count: Int
  totalCount: Int
}

type LivestyleGroupBy {
  id: [LivestyleConnectionId]
  created_at: [LivestyleConnectionCreated_at]
  updated_at: [LivestyleConnectionUpdated_at]
  published_at: [LivestyleConnectionPublished_at]
}

type LivestyleConnectionId {
  key: ID
  connection: LivestyleConnection
}

type LivestyleConnectionCreated_at {
  key: DateTime
  connection: LivestyleConnection
}

type LivestyleConnectionUpdated_at {
  key: DateTime
  connection: LivestyleConnection
}

type LivestyleConnectionPublished_at {
  key: DateTime
  connection: LivestyleConnection
}

input LivestyleInput {
  Trinkflaschen: [ID]
  Makeup_Etuis: [ID]
  Korperbursten: [ID]
  Kerzen: [ID]
  Fur_Mutter: [ID]
  Nahrungserganzungsmittel: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editLivestyleInput {
  Trinkflaschen: [ID]
  Makeup_Etuis: [ID]
  Korperbursten: [ID]
  Kerzen: [ID]
  Fur_Mutter: [ID]
  Nahrungserganzungsmittel: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createLivestyleInput {
  data: LivestyleInput
}

type createLivestylePayload {
  livestyle: Livestyle
}

input updateLivestyleInput {
  where: InputID
  data: editLivestyleInput
}

type updateLivestylePayload {
  livestyle: Livestyle
}

input deleteLivestyleInput {
  where: InputID
}

type deleteLivestylePayload {
  livestyle: Livestyle
}

type M {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String
  published_at: DateTime
}

input MInput {
  name: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editMInput {
  name: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input updateMInput {
  data: editMInput
}

type updateMPayload {
  m: M
}

type deleteMPayload {
  m: M
}

type Navbar {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  categories: JSON
  published_at: DateTime
}

type NavbarConnection {
  values: [Navbar]
  groupBy: NavbarGroupBy
  aggregate: NavbarAggregator
}

type NavbarAggregator {
  count: Int
  totalCount: Int
}

type NavbarGroupBy {
  id: [NavbarConnectionId]
  created_at: [NavbarConnectionCreated_at]
  updated_at: [NavbarConnectionUpdated_at]
  categories: [NavbarConnectionCategories]
  published_at: [NavbarConnectionPublished_at]
}

type NavbarConnectionId {
  key: ID
  connection: NavbarConnection
}

type NavbarConnectionCreated_at {
  key: DateTime
  connection: NavbarConnection
}

type NavbarConnectionUpdated_at {
  key: DateTime
  connection: NavbarConnection
}

type NavbarConnectionCategories {
  key: JSON
  connection: NavbarConnection
}

type NavbarConnectionPublished_at {
  key: DateTime
  connection: NavbarConnection
}

input NavbarInput {
  categories: JSON
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editNavbarInput {
  categories: JSON
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createNavbarInput {
  data: NavbarInput
}

type createNavbarPayload {
  navbar: Navbar
}

input updateNavbarInput {
  where: InputID
  data: editNavbarInput
}

type updateNavbarPayload {
  navbar: Navbar
}

input deleteNavbarInput {
  where: InputID
}

type deleteNavbarPayload {
  navbar: Navbar
}

type PageHeader {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  info: String
  page_headers_style: JSON
  published_at: DateTime
}

type PageHeaderConnection {
  values: [PageHeader]
  groupBy: PageHeaderGroupBy
  aggregate: PageHeaderAggregator
}

type PageHeaderAggregator {
  count: Int
  totalCount: Int
}

type PageHeaderGroupBy {
  id: [PageHeaderConnectionId]
  created_at: [PageHeaderConnectionCreated_at]
  updated_at: [PageHeaderConnectionUpdated_at]
  info: [PageHeaderConnectionInfo]
  page_headers_style: [PageHeaderConnectionPage_headers_style]
  published_at: [PageHeaderConnectionPublished_at]
}

type PageHeaderConnectionId {
  key: ID
  connection: PageHeaderConnection
}

type PageHeaderConnectionCreated_at {
  key: DateTime
  connection: PageHeaderConnection
}

type PageHeaderConnectionUpdated_at {
  key: DateTime
  connection: PageHeaderConnection
}

type PageHeaderConnectionInfo {
  key: String
  connection: PageHeaderConnection
}

type PageHeaderConnectionPage_headers_style {
  key: JSON
  connection: PageHeaderConnection
}

type PageHeaderConnectionPublished_at {
  key: DateTime
  connection: PageHeaderConnection
}

input PageHeaderInput {
  info: String
  page_headers_style: JSON
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editPageHeaderInput {
  info: String
  page_headers_style: JSON
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createPageHeaderInput {
  data: PageHeaderInput
}

type createPageHeaderPayload {
  pageHeader: PageHeader
}

input updatePageHeaderInput {
  where: InputID
  data: editPageHeaderInput
}

type updatePageHeaderPayload {
  pageHeader: PageHeader
}

input deletePageHeaderInput {
  where: InputID
}

type deletePageHeaderPayload {
  pageHeader: PageHeader
}

type Parfums {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  published_at: DateTime
  Damen(sort: String, limit: Int, start: Int, where: JSON): [Products]
  Herren(sort: String, limit: Int, start: Int, where: JSON): [Products]
  Unisex(sort: String, limit: Int, start: Int, where: JSON): [Products]
}

type ParfumsConnection {
  values: [Parfums]
  groupBy: ParfumsGroupBy
  aggregate: ParfumsAggregator
}

type ParfumsAggregator {
  count: Int
  totalCount: Int
}

type ParfumsGroupBy {
  id: [ParfumsConnectionId]
  created_at: [ParfumsConnectionCreated_at]
  updated_at: [ParfumsConnectionUpdated_at]
  published_at: [ParfumsConnectionPublished_at]
}

type ParfumsConnectionId {
  key: ID
  connection: ParfumsConnection
}

type ParfumsConnectionCreated_at {
  key: DateTime
  connection: ParfumsConnection
}

type ParfumsConnectionUpdated_at {
  key: DateTime
  connection: ParfumsConnection
}

type ParfumsConnectionPublished_at {
  key: DateTime
  connection: ParfumsConnection
}

input ParfumInput {
  Damen: [ID]
  Herren: [ID]
  Unisex: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editParfumInput {
  Damen: [ID]
  Herren: [ID]
  Unisex: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createParfumInput {
  data: ParfumInput
}

type createParfumPayload {
  parfum: Parfums
}

input updateParfumInput {
  where: InputID
  data: editParfumInput
}

type updateParfumPayload {
  parfum: Parfums
}

input deleteParfumInput {
  where: InputID
}

type deleteParfumPayload {
  parfum: Parfums
}

type ParuyrCart {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  users_permissions_user: UsersPermissionsUser
  product: Products
  countity: Long
  published_at: DateTime
}

type ParuyrCartConnection {
  values: [ParuyrCart]
  groupBy: ParuyrCartGroupBy
  aggregate: ParuyrCartAggregator
}

type ParuyrCartAggregator {
  count: Int
  totalCount: Int
}

type ParuyrCartGroupBy {
  id: [ParuyrCartConnectionId]
  created_at: [ParuyrCartConnectionCreated_at]
  updated_at: [ParuyrCartConnectionUpdated_at]
  users_permissions_user: [ParuyrCartConnectionUsers_permissions_user]
  product: [ParuyrCartConnectionProduct]
  countity: [ParuyrCartConnectionCountity]
  published_at: [ParuyrCartConnectionPublished_at]
}

type ParuyrCartConnectionId {
  key: ID
  connection: ParuyrCartConnection
}

type ParuyrCartConnectionCreated_at {
  key: DateTime
  connection: ParuyrCartConnection
}

type ParuyrCartConnectionUpdated_at {
  key: DateTime
  connection: ParuyrCartConnection
}

type ParuyrCartConnectionUsers_permissions_user {
  key: ID
  connection: ParuyrCartConnection
}

type ParuyrCartConnectionProduct {
  key: ID
  connection: ParuyrCartConnection
}

type ParuyrCartConnectionCountity {
  key: ID
  connection: ParuyrCartConnection
}

type ParuyrCartConnectionPublished_at {
  key: DateTime
  connection: ParuyrCartConnection
}

input ParuyrCartInput {
  users_permissions_user: ID
  product: ID
  countity: Long
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editParuyrCartInput {
  users_permissions_user: ID
  product: ID
  countity: Long
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createParuyrCartInput {
  data: ParuyrCartInput
}

type createParuyrCartPayload {
  paruyrCart: ParuyrCart
}

input updateParuyrCartInput {
  where: InputID
  data: editParuyrCartInput
}

type updateParuyrCartPayload {
  paruyrCart: ParuyrCart
}

input deleteParuyrCartInput {
  where: InputID
}

type deleteParuyrCartPayload {
  paruyrCart: ParuyrCart
}

type Products {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  price: String
  images: UploadFile
  new: Boolean
  clean_product: Boolean
  company: String
  energy_kapseln: Boolean
  kapseln: Boolean
  for_sale_count: Long
  paruyr_cart: ParuyrCart
  published_at: DateTime
}

type ProductsConnection {
  values: [Products]
  groupBy: ProductsGroupBy
  aggregate: ProductsAggregator
}

type ProductsAggregator {
  count: Int
  totalCount: Int
}

type ProductsGroupBy {
  id: [ProductsConnectionId]
  created_at: [ProductsConnectionCreated_at]
  updated_at: [ProductsConnectionUpdated_at]
  price: [ProductsConnectionPrice]
  images: [ProductsConnectionImages]
  new: [ProductsConnectionNew]
  clean_product: [ProductsConnectionClean_product]
  company: [ProductsConnectionCompany]
  energy_kapseln: [ProductsConnectionEnergy_kapseln]
  kapseln: [ProductsConnectionKapseln]
  for_sale_count: [ProductsConnectionFor_sale_count]
  paruyr_cart: [ProductsConnectionParuyr_cart]
  published_at: [ProductsConnectionPublished_at]
}

type ProductsConnectionId {
  key: ID
  connection: ProductsConnection
}

type ProductsConnectionCreated_at {
  key: DateTime
  connection: ProductsConnection
}

type ProductsConnectionUpdated_at {
  key: DateTime
  connection: ProductsConnection
}

type ProductsConnectionPrice {
  key: String
  connection: ProductsConnection
}

type ProductsConnectionImages {
  key: ID
  connection: ProductsConnection
}

type ProductsConnectionNew {
  key: Boolean
  connection: ProductsConnection
}

type ProductsConnectionClean_product {
  key: Boolean
  connection: ProductsConnection
}

type ProductsConnectionCompany {
  key: String
  connection: ProductsConnection
}

type ProductsConnectionEnergy_kapseln {
  key: Boolean
  connection: ProductsConnection
}

type ProductsConnectionKapseln {
  key: Boolean
  connection: ProductsConnection
}

type ProductsConnectionFor_sale_count {
  key: ID
  connection: ProductsConnection
}

type ProductsConnectionParuyr_cart {
  key: ID
  connection: ProductsConnection
}

type ProductsConnectionPublished_at {
  key: DateTime
  connection: ProductsConnection
}

input ProductInput {
  price: String
  images: ID
  new: Boolean
  clean_product: Boolean
  company: String
  energy_kapseln: Boolean
  kapseln: Boolean
  for_sale_count: Long
  paruyr_cart: ID
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editProductInput {
  price: String
  images: ID
  new: Boolean
  clean_product: Boolean
  company: String
  energy_kapseln: Boolean
  kapseln: Boolean
  for_sale_count: Long
  paruyr_cart: ID
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createProductInput {
  data: ProductInput
}

type createProductPayload {
  product: Products
}

input updateProductInput {
  where: InputID
  data: editProductInput
}

type updateProductPayload {
  product: Products
}

input deleteProductInput {
  where: InputID
}

type deleteProductPayload {
  product: Products
}

type ShopingCart {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  users_permissions_user: UsersPermissionsUser
  published_at: DateTime
  products(sort: String, limit: Int, start: Int, where: JSON): [Products]
}

type ShopingCartConnection {
  values: [ShopingCart]
  groupBy: ShopingCartGroupBy
  aggregate: ShopingCartAggregator
}

type ShopingCartAggregator {
  count: Int
  totalCount: Int
}

type ShopingCartGroupBy {
  id: [ShopingCartConnectionId]
  created_at: [ShopingCartConnectionCreated_at]
  updated_at: [ShopingCartConnectionUpdated_at]
  users_permissions_user: [ShopingCartConnectionUsers_permissions_user]
  published_at: [ShopingCartConnectionPublished_at]
}

type ShopingCartConnectionId {
  key: ID
  connection: ShopingCartConnection
}

type ShopingCartConnectionCreated_at {
  key: DateTime
  connection: ShopingCartConnection
}

type ShopingCartConnectionUpdated_at {
  key: DateTime
  connection: ShopingCartConnection
}

type ShopingCartConnectionUsers_permissions_user {
  key: ID
  connection: ShopingCartConnection
}

type ShopingCartConnectionPublished_at {
  key: DateTime
  connection: ShopingCartConnection
}

input ShopingCartInput {
  users_permissions_user: ID
  products: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editShopingCartInput {
  users_permissions_user: ID
  products: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createShopingCartInput {
  data: ShopingCartInput
}

type createShopingCartPayload {
  shopingCart: ShopingCart
}

input updateShopingCartInput {
  where: InputID
  data: editShopingCartInput
}

type updateShopingCartPayload {
  shopingCart: ShopingCart
}

input deleteShopingCartInput {
  where: InputID
}

type deleteShopingCartPayload {
  shopingCart: ShopingCart
}

type Videos {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  video: UploadFile
  Review_Bioeffect: String
  video_name: String
  description: String
  published_at: DateTime
}

type VideosConnection {
  values: [Videos]
  groupBy: VideosGroupBy
  aggregate: VideosAggregator
}

type VideosAggregator {
  count: Int
  totalCount: Int
}

type VideosGroupBy {
  id: [VideosConnectionId]
  created_at: [VideosConnectionCreated_at]
  updated_at: [VideosConnectionUpdated_at]
  video: [VideosConnectionVideo]
  Review_Bioeffect: [VideosConnectionReview_Bioeffect]
  video_name: [VideosConnectionVideo_name]
  description: [VideosConnectionDescription]
  published_at: [VideosConnectionPublished_at]
}

type VideosConnectionId {
  key: ID
  connection: VideosConnection
}

type VideosConnectionCreated_at {
  key: DateTime
  connection: VideosConnection
}

type VideosConnectionUpdated_at {
  key: DateTime
  connection: VideosConnection
}

type VideosConnectionVideo {
  key: ID
  connection: VideosConnection
}

type VideosConnectionReview_Bioeffect {
  key: String
  connection: VideosConnection
}

type VideosConnectionVideo_name {
  key: String
  connection: VideosConnection
}

type VideosConnectionDescription {
  key: String
  connection: VideosConnection
}

type VideosConnectionPublished_at {
  key: DateTime
  connection: VideosConnection
}

input VideoInput {
  video: ID
  Review_Bioeffect: String
  video_name: String
  description: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editVideoInput {
  video: ID
  Review_Bioeffect: String
  video_name: String
  description: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createVideoInput {
  data: VideoInput
}

type createVideoPayload {
  video: Videos
}

input updateVideoInput {
  where: InputID
  data: editVideoInput
}

type updateVideoPayload {
  video: Videos
}

input deleteVideoInput {
  where: InputID
}

type deleteVideoPayload {
  video: Videos
}

type UploadFile {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileAggregator {
  count: Int
  totalCount: Int
  sum: UploadFileAggregatorSum
  avg: UploadFileAggregatorAvg
  min: UploadFileAggregatorMin
  max: UploadFileAggregatorMax
}

type UploadFileAggregatorSum {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorAvg {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMin {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMax {
  width: Float
  height: Float
  size: Float
}

type UploadFileGroupBy {
  id: [UploadFileConnectionId]
  created_at: [UploadFileConnectionCreated_at]
  updated_at: [UploadFileConnectionUpdated_at]
  name: [UploadFileConnectionName]
  alternativeText: [UploadFileConnectionAlternativeText]
  caption: [UploadFileConnectionCaption]
  width: [UploadFileConnectionWidth]
  height: [UploadFileConnectionHeight]
  formats: [UploadFileConnectionFormats]
  hash: [UploadFileConnectionHash]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  previewUrl: [UploadFileConnectionPreviewUrl]
  provider: [UploadFileConnectionProvider]
  provider_metadata: [UploadFileConnectionProvider_metadata]
}

type UploadFileConnectionId {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionCreated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUpdated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionAlternativeText {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionCaption {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionWidth {
  key: Int
  connection: UploadFileConnection
}

type UploadFileConnectionHeight {
  key: Int
  connection: UploadFileConnection
}

type UploadFileConnectionFormats {
  key: JSON
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: Float
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionPreviewUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider_metadata {
  key: JSON
  connection: UploadFileConnection
}

input FileInput {
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

input editFileInput {
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

input deleteFileInput {
  where: InputID
}

type deleteFilePayload {
  file: UploadFile
}

type UsersPermissionsPermission {
  id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsRoleGroupBy {
  id: [UsersPermissionsRoleConnectionId]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsRoleConnectionId {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

type UsersPermissionsUser {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
  images(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsUserGroupBy {
  id: [UsersPermissionsUserConnectionId]
  created_at: [UsersPermissionsUserConnectionCreated_at]
  updated_at: [UsersPermissionsUserConnectionUpdated_at]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
}

type UsersPermissionsUserConnectionId {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionCreated_at {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUpdated_at {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  images: [ID]
  created_by: ID
  updated_by: ID
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  images: [ID]
  created_by: ID
  updated_by: ID
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | UsersPermissionsLoginPayload | UserPermissionsPasswordPayload | CleanBeauty | CleanBeautyConnection | CleanBeautyAggregator | CleanBeautyGroupBy | CleanBeautyConnectionId | CleanBeautyConnectionCreated_at | CleanBeautyConnectionUpdated_at | CleanBeautyConnectionPublished_at | createCleanBeautyPayload | updateCleanBeautyPayload | deleteCleanBeautyPayload | FavouriteProducts | FavouriteProductsConnection | FavouriteProductsAggregator | FavouriteProductsGroupBy | FavouriteProductsConnectionId | FavouriteProductsConnectionCreated_at | FavouriteProductsConnectionUpdated_at | FavouriteProductsConnectionUsers_permissions_user | FavouriteProductsConnectionPublished_at | createFavouriteProductPayload | updateFavouriteProductPayload | deleteFavouriteProductPayload | Herren | HerrenConnection | HerrenAggregator | HerrenGroupBy | HerrenConnectionId | HerrenConnectionCreated_at | HerrenConnectionUpdated_at | HerrenConnectionPublished_at | createHerrenPayload | updateHerrenPayload | deleteHerrenPayload | Livestyle | LivestyleConnection | LivestyleAggregator | LivestyleGroupBy | LivestyleConnectionId | LivestyleConnectionCreated_at | LivestyleConnectionUpdated_at | LivestyleConnectionPublished_at | createLivestylePayload | updateLivestylePayload | deleteLivestylePayload | M | updateMPayload | deleteMPayload | Navbar | NavbarConnection | NavbarAggregator | NavbarGroupBy | NavbarConnectionId | NavbarConnectionCreated_at | NavbarConnectionUpdated_at | NavbarConnectionCategories | NavbarConnectionPublished_at | createNavbarPayload | updateNavbarPayload | deleteNavbarPayload | PageHeader | PageHeaderConnection | PageHeaderAggregator | PageHeaderGroupBy | PageHeaderConnectionId | PageHeaderConnectionCreated_at | PageHeaderConnectionUpdated_at | PageHeaderConnectionInfo | PageHeaderConnectionPage_headers_style | PageHeaderConnectionPublished_at | createPageHeaderPayload | updatePageHeaderPayload | deletePageHeaderPayload | Parfums | ParfumsConnection | ParfumsAggregator | ParfumsGroupBy | ParfumsConnectionId | ParfumsConnectionCreated_at | ParfumsConnectionUpdated_at | ParfumsConnectionPublished_at | createParfumPayload | updateParfumPayload | deleteParfumPayload | ParuyrCart | ParuyrCartConnection | ParuyrCartAggregator | ParuyrCartGroupBy | ParuyrCartConnectionId | ParuyrCartConnectionCreated_at | ParuyrCartConnectionUpdated_at | ParuyrCartConnectionUsers_permissions_user | ParuyrCartConnectionProduct | ParuyrCartConnectionCountity | ParuyrCartConnectionPublished_at | createParuyrCartPayload | updateParuyrCartPayload | deleteParuyrCartPayload | Products | ProductsConnection | ProductsAggregator | ProductsGroupBy | ProductsConnectionId | ProductsConnectionCreated_at | ProductsConnectionUpdated_at | ProductsConnectionPrice | ProductsConnectionImages | ProductsConnectionNew | ProductsConnectionClean_product | ProductsConnectionCompany | ProductsConnectionEnergy_kapseln | ProductsConnectionKapseln | ProductsConnectionFor_sale_count | ProductsConnectionParuyr_cart | ProductsConnectionPublished_at | createProductPayload | updateProductPayload | deleteProductPayload | ShopingCart | ShopingCartConnection | ShopingCartAggregator | ShopingCartGroupBy | ShopingCartConnectionId | ShopingCartConnectionCreated_at | ShopingCartConnectionUpdated_at | ShopingCartConnectionUsers_permissions_user | ShopingCartConnectionPublished_at | createShopingCartPayload | updateShopingCartPayload | deleteShopingCartPayload | Videos | VideosConnection | VideosAggregator | VideosGroupBy | VideosConnectionId | VideosConnectionCreated_at | VideosConnectionUpdated_at | VideosConnectionVideo | VideosConnectionReview_Bioeffect | VideosConnectionVideo_name | VideosConnectionDescription | VideosConnectionPublished_at | createVideoPayload | updateVideoPayload | deleteVideoPayload | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileAggregatorSum | UploadFileAggregatorAvg | UploadFileAggregatorMin | UploadFileAggregatorMax | UploadFileGroupBy | UploadFileConnectionId | UploadFileConnectionCreated_at | UploadFileConnectionUpdated_at | UploadFileConnectionName | UploadFileConnectionAlternativeText | UploadFileConnectionCaption | UploadFileConnectionWidth | UploadFileConnectionHeight | UploadFileConnectionFormats | UploadFileConnectionHash | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionPreviewUrl | UploadFileConnectionProvider | UploadFileConnectionProvider_metadata | deleteFilePayload | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnectionId | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsUser | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnectionId | UsersPermissionsUserConnectionCreated_at | UsersPermissionsUserConnectionUpdated_at | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole | createUserPayload | updateUserPayload | deleteUserPayload

input InputID {
  id: ID!
}

enum PublicationState {
  LIVE
  PREVIEW
}

type AdminUser {
  id: ID!
  username: String
  firstname: String!
  lastname: String!
}

type Query {
  cleanBeauty(id: ID!, publicationState: PublicationState): CleanBeauty
  cleanBeauties(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [CleanBeauty]
  cleanBeautiesConnection(sort: String, limit: Int, start: Int, where: JSON): CleanBeautyConnection
  favouriteProduct(id: ID!, publicationState: PublicationState): FavouriteProducts
  favouriteProducts(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [FavouriteProducts]
  favouriteProductsConnection(sort: String, limit: Int, start: Int, where: JSON): FavouriteProductsConnection
  herren(id: ID!, publicationState: PublicationState): Herren
  herrens(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Herren]
  herrensConnection(sort: String, limit: Int, start: Int, where: JSON): HerrenConnection
  livestyle(id: ID!, publicationState: PublicationState): Livestyle
  livestyles(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Livestyle]
  livestylesConnection(sort: String, limit: Int, start: Int, where: JSON): LivestyleConnection
  m(publicationState: PublicationState): M
  navbar(id: ID!, publicationState: PublicationState): Navbar
  navbars(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Navbar]
  navbarsConnection(sort: String, limit: Int, start: Int, where: JSON): NavbarConnection
  pageHeader(id: ID!, publicationState: PublicationState): PageHeader
  pageHeaders(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [PageHeader]
  pageHeadersConnection(sort: String, limit: Int, start: Int, where: JSON): PageHeaderConnection
  parfum(id: ID!, publicationState: PublicationState): Parfums
  parfums(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Parfums]
  parfumsConnection(sort: String, limit: Int, start: Int, where: JSON): ParfumsConnection
  paruyrCart(id: ID!, publicationState: PublicationState): ParuyrCart
  paruyrCarts(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [ParuyrCart]
  paruyrCartsConnection(sort: String, limit: Int, start: Int, where: JSON): ParuyrCartConnection
  product(id: ID!, publicationState: PublicationState): Products
  products(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Products]
  productsConnection(sort: String, limit: Int, start: Int, where: JSON): ProductsConnection
  shopingCart(id: ID!, publicationState: PublicationState): ShopingCart
  shopingCarts(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [ShopingCart]
  shopingCartsConnection(sort: String, limit: Int, start: Int, where: JSON): ShopingCartConnection
  video(id: ID!, publicationState: PublicationState): Videos
  videos(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Videos]
  videosConnection(sort: String, limit: Int, start: Int, where: JSON): VideosConnection
  files(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!, publicationState: PublicationState): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!, publicationState: PublicationState): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  me: UsersPermissionsMe
}

type Mutation {
  createCleanBeauty(input: createCleanBeautyInput): createCleanBeautyPayload
  updateCleanBeauty(input: updateCleanBeautyInput): updateCleanBeautyPayload
  deleteCleanBeauty(input: deleteCleanBeautyInput): deleteCleanBeautyPayload
  createFavouriteProduct(input: createFavouriteProductInput): createFavouriteProductPayload
  updateFavouriteProduct(input: updateFavouriteProductInput): updateFavouriteProductPayload
  deleteFavouriteProduct(input: deleteFavouriteProductInput): deleteFavouriteProductPayload
  createHerren(input: createHerrenInput): createHerrenPayload
  updateHerren(input: updateHerrenInput): updateHerrenPayload
  deleteHerren(input: deleteHerrenInput): deleteHerrenPayload
  createLivestyle(input: createLivestyleInput): createLivestylePayload
  updateLivestyle(input: updateLivestyleInput): updateLivestylePayload
  deleteLivestyle(input: deleteLivestyleInput): deleteLivestylePayload
  updateM(input: updateMInput): updateMPayload
  deleteM: deleteMPayload
  createNavbar(input: createNavbarInput): createNavbarPayload
  updateNavbar(input: updateNavbarInput): updateNavbarPayload
  deleteNavbar(input: deleteNavbarInput): deleteNavbarPayload
  createPageHeader(input: createPageHeaderInput): createPageHeaderPayload
  updatePageHeader(input: updatePageHeaderInput): updatePageHeaderPayload
  deletePageHeader(input: deletePageHeaderInput): deletePageHeaderPayload
  createParfum(input: createParfumInput): createParfumPayload
  updateParfum(input: updateParfumInput): updateParfumPayload
  deleteParfum(input: deleteParfumInput): deleteParfumPayload
  createParuyrCart(input: createParuyrCartInput): createParuyrCartPayload
  updateParuyrCart(input: updateParuyrCartInput): updateParuyrCartPayload
  deleteParuyrCart(input: deleteParuyrCartInput): deleteParuyrCartPayload
  createProduct(input: createProductInput): createProductPayload
  updateProduct(input: updateProductInput): updateProductPayload
  deleteProduct(input: deleteProductInput): deleteProductPayload
  createShopingCart(input: createShopingCartInput): createShopingCartPayload
  updateShopingCart(input: updateShopingCartInput): updateShopingCartPayload
  deleteShopingCart(input: deleteShopingCartInput): deleteShopingCartPayload
  createVideo(input: createVideoInput): createVideoPayload
  updateVideo(input: updateVideoInput): updateVideoPayload
  deleteVideo(input: deleteVideoInput): deleteVideoPayload

  """Delete one file"""
  deleteFile(input: deleteFileInput): deleteFilePayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, field: String, source: String, file: Upload!): UploadFile!
  multipleUpload(refId: ID, ref: String, field: String, source: String, files: [Upload]!): [UploadFile]!
  updateFileInfo(id: ID!, info: FileInfoInput!): UploadFile!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  forgotPassword(email: String!): UserPermissionsPasswordPayload
  resetPassword(password: String!, passwordConfirmation: String!, code: String!): UsersPermissionsLoginPayload
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""A time string with format: HH:mm:ss.SSS"""
scalar Time

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""The `Long` scalar type represents 52-bit integers"""
scalar Long

"""The `Upload` scalar type represents a file upload."""
scalar Upload
